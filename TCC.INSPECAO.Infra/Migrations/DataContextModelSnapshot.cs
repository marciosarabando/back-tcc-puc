// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TCC.INSPECAO.Infra.Contexts;

namespace TCC.INSPECAO.Infra.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TCC.INSPECAO.Domain.Entity.Claims", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nome")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Valor")
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.ToTable("CLAIM");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fc1e2284-21fe-4f8b-98d4-b53fd3d25d5b"),
                            Nome = "PerfilAcesso",
                            Valor = "Administrador"
                        },
                        new
                        {
                            Id = new Guid("ba7c4d54-e892-4d1c-ba34-b2c292a38210"),
                            Nome = "PerfilAcesso",
                            Valor = "Supervisor"
                        },
                        new
                        {
                            Id = new Guid("92547574-101a-4b68-9fbe-37502056898d"),
                            Nome = "PerfilAcesso",
                            Valor = "Técnico"
                        },
                        new
                        {
                            Id = new Guid("24320ad6-dcc4-4287-9c19-70c97ba2cc40"),
                            Nome = "PerfilAcesso",
                            Valor = "Visitante"
                        });
                });

            modelBuilder.Entity("TCC.INSPECAO.Domain.Entity.Estabelecimento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CNPJ")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ESTABELECIMENTO");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cb03e8ff-da79-4012-b309-48af60d36bef"),
                            CNPJ = "19878404002235",
                            Nome = "FUNDAÇÃO SÃO FRANCISCO XAVIER - HC HOSPITAL DE CUBATÃO"
                        });
                });

            modelBuilder.Entity("TCC.INSPECAO.Domain.Entity.Inspecao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DataHoraFim")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataHoraInicio")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EstabelecimentoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("InspecaoStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Observacao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TurnoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EstabelecimentoId");

                    b.HasIndex("InspecaoStatusId");

                    b.HasIndex("TurnoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("INSPECAO");
                });

            modelBuilder.Entity("TCC.INSPECAO.Domain.Entity.InspecaoItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataHora")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("InspecaoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Observacao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SistemaItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Valor")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InspecaoId");

                    b.HasIndex("SistemaItemId");

                    b.ToTable("INSPECAO_ITEM");
                });

            modelBuilder.Entity("TCC.INSPECAO.Domain.Entity.InspecaoStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descricao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("INSPECAO_STATUS");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b169792d-773e-4381-a9c5-f8dab8f2095f"),
                            Descricao = "Inspeção em andamento.",
                            Nome = "INICIADA"
                        },
                        new
                        {
                            Id = new Guid("56fa849f-ca54-4749-9c59-cb01b08c3f5f"),
                            Descricao = "Inspeção finalizada.",
                            Nome = "FINALIZADA"
                        });
                });

            modelBuilder.Entity("TCC.INSPECAO.Domain.Entity.Sistema", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<string>("Descricao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("EstabelecimentoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumeroOrdem")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EstabelecimentoId");

                    b.ToTable("SISTEMA");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c3b8fc8e-bd6f-4d72-95cf-1af181f8bfa6"),
                            Ativo = false,
                            Descricao = "Breve descrição sobre o sistema",
                            Nome = "CHILLERS E TORRES",
                            NumeroOrdem = 1
                        },
                        new
                        {
                            Id = new Guid("e38e4d30-3f3f-4d49-a7b0-a4ce3c190279"),
                            Ativo = false,
                            Descricao = "Breve descrição sobre o sistema",
                            Nome = "ABASTECIMENTO DE ÁGUA",
                            NumeroOrdem = 2
                        },
                        new
                        {
                            Id = new Guid("d74b115c-a6cf-482f-bc37-5c1b586927f0"),
                            Ativo = false,
                            Descricao = "Breve descrição sobre o sistema",
                            Nome = "GRUPO GERADOR",
                            NumeroOrdem = 3
                        },
                        new
                        {
                            Id = new Guid("f30bb314-8b8d-4b28-a32a-76935d828c4c"),
                            Ativo = false,
                            Descricao = "Breve descrição sobre o sistema",
                            Nome = "ABASTECIMENTO DE ÁGUA",
                            NumeroOrdem = 4
                        },
                        new
                        {
                            Id = new Guid("0f1c662e-c217-4f69-aba9-061ed5611c19"),
                            Ativo = false,
                            Descricao = "Breve descrição sobre o sistema",
                            Nome = "SISTEMA CENTRAL DE AR COMPRIMIDO",
                            NumeroOrdem = 5
                        },
                        new
                        {
                            Id = new Guid("8403f969-5acc-41c7-9b57-930554de6e91"),
                            Ativo = false,
                            Descricao = "Breve descrição sobre o sistema",
                            Nome = "SISTEMA CENTRAL DE VÁCUO",
                            NumeroOrdem = 6
                        },
                        new
                        {
                            Id = new Guid("36a15387-fd18-4fa4-8b48-c22da6938f3e"),
                            Ativo = false,
                            Descricao = "Breve descrição sobre o sistema",
                            Nome = "SISTEMA ELÉTRICO DE OXIGÊNIO",
                            NumeroOrdem = 7
                        });
                });

            modelBuilder.Entity("TCC.INSPECAO.Domain.Entity.SistemaItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<string>("Descricao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumeroOrdem")
                        .HasColumnType("int");

                    b.Property<Guid?>("SistemaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UnidadeMedidaId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SistemaId");

                    b.HasIndex("UnidadeMedidaId");

                    b.ToTable("SISTEMA_ITEM");
                });

            modelBuilder.Entity("TCC.INSPECAO.Domain.Entity.Turno", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("HoraFim")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("HoraInicio")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sigla")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TURNO");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2c75a142-05f3-4d46-8c4e-1402149e7174"),
                            HoraFim = new DateTime(1900, 1, 1, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            HoraInicio = new DateTime(1900, 1, 1, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "TURNO A",
                            Sigla = "A"
                        },
                        new
                        {
                            Id = new Guid("8751edf1-1b36-484b-8cd0-659ed119c3c5"),
                            HoraFim = new DateTime(1900, 1, 1, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            HoraInicio = new DateTime(1900, 1, 1, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "TURNO B",
                            Sigla = "B"
                        });
                });

            modelBuilder.Entity("TCC.INSPECAO.Domain.Entity.UnidadeMedida", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TipoDado")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("UNIDADE_MEDIDA");

                    b.HasData(
                        new
                        {
                            Id = new Guid("12433d88-777b-414c-bde2-cb79fdcc21ae"),
                            Nome = "VOLTS",
                            TipoDado = 2
                        },
                        new
                        {
                            Id = new Guid("c4967365-135d-4407-b2d6-dbfba3ed19b5"),
                            Nome = "GRAUS",
                            TipoDado = 2
                        },
                        new
                        {
                            Id = new Guid("e3ec3baa-74ef-4645-b91d-691daaf58e12"),
                            Nome = "LITROS",
                            TipoDado = 2
                        },
                        new
                        {
                            Id = new Guid("9168ab17-4649-4a90-9138-5b8782fd104b"),
                            Nome = "ITENS",
                            TipoDado = 1
                        },
                        new
                        {
                            Id = new Guid("bbbf15da-b624-49e9-b0b3-6b94ad4ccbd3"),
                            Nome = "METROS",
                            TipoDado = 2
                        },
                        new
                        {
                            Id = new Guid("563c3788-1757-4486-9872-0d95478fa54c"),
                            Nome = "CHECK",
                            TipoDado = 4
                        },
                        new
                        {
                            Id = new Guid("5503d65a-6566-4905-b6ea-5a2d49fa391a"),
                            Nome = "OBSERVACAO",
                            TipoDado = 3
                        },
                        new
                        {
                            Id = new Guid("64aea67a-e78d-4af3-b0f5-b5ab5224d247"),
                            Nome = "PRESSÃO",
                            TipoDado = 2
                        },
                        new
                        {
                            Id = new Guid("adcfd4f3-8a56-4046-a938-c7e53851b6f4"),
                            Nome = "KW/H",
                            TipoDado = 2
                        });
                });

            modelBuilder.Entity("TCC.INSPECAO.Domain.Entity.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<Guid?>("EstabelecimentoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IdFirebase")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("EstabelecimentoId");

                    b.ToTable("USUARIO");
                });

            modelBuilder.Entity("TCC.INSPECAO.Domain.Entity.UsuarioClaims", b =>
                {
                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClaimId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UsuarioId", "ClaimId");

                    b.HasIndex("ClaimId");

                    b.ToTable("USUARIO_CLAIMS");
                });

            modelBuilder.Entity("TCC.INSPECAO.Domain.Entity.Inspecao", b =>
                {
                    b.HasOne("TCC.INSPECAO.Domain.Entity.Estabelecimento", "Estabelecimento")
                        .WithMany("Inspecoes")
                        .HasForeignKey("EstabelecimentoId");

                    b.HasOne("TCC.INSPECAO.Domain.Entity.InspecaoStatus", "InspecaoStatus")
                        .WithMany()
                        .HasForeignKey("InspecaoStatusId");

                    b.HasOne("TCC.INSPECAO.Domain.Entity.Turno", "Turno")
                        .WithMany()
                        .HasForeignKey("TurnoId");

                    b.HasOne("TCC.INSPECAO.Domain.Entity.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId");
                });

            modelBuilder.Entity("TCC.INSPECAO.Domain.Entity.InspecaoItem", b =>
                {
                    b.HasOne("TCC.INSPECAO.Domain.Entity.Inspecao", "Inspecao")
                        .WithMany("InspecaoItem")
                        .HasForeignKey("InspecaoId");

                    b.HasOne("TCC.INSPECAO.Domain.Entity.SistemaItem", "SistemaItem")
                        .WithMany("InspecaoItens")
                        .HasForeignKey("SistemaItemId");
                });

            modelBuilder.Entity("TCC.INSPECAO.Domain.Entity.Sistema", b =>
                {
                    b.HasOne("TCC.INSPECAO.Domain.Entity.Estabelecimento", "Estabelecimento")
                        .WithMany()
                        .HasForeignKey("EstabelecimentoId");
                });

            modelBuilder.Entity("TCC.INSPECAO.Domain.Entity.SistemaItem", b =>
                {
                    b.HasOne("TCC.INSPECAO.Domain.Entity.Sistema", "Sistema")
                        .WithMany("SistemaItens")
                        .HasForeignKey("SistemaId");

                    b.HasOne("TCC.INSPECAO.Domain.Entity.UnidadeMedida", "UnidadeMedida")
                        .WithMany()
                        .HasForeignKey("UnidadeMedidaId");
                });

            modelBuilder.Entity("TCC.INSPECAO.Domain.Entity.Usuario", b =>
                {
                    b.HasOne("TCC.INSPECAO.Domain.Entity.Estabelecimento", "Estabelecimento")
                        .WithMany("Usuarios")
                        .HasForeignKey("EstabelecimentoId");
                });

            modelBuilder.Entity("TCC.INSPECAO.Domain.Entity.UsuarioClaims", b =>
                {
                    b.HasOne("TCC.INSPECAO.Domain.Entity.Claims", "Claim")
                        .WithMany("UsuarioClaims")
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TCC.INSPECAO.Domain.Entity.Usuario", "Usuario")
                        .WithMany("UsuarioClaims")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
